#!/usr/bin/env python

from os.path import expanduser
import sys
import nltk
from nltk.chunk.regexp import RegexpChunkParser
from nltk.chunk.regexp import ChunkString, ChunkRule, ChinkRule, MergeRule, SplitRule
from nltk.tree import Tree
from nltk import draw
import json

home = expanduser("~")
nltk.data.path.append(home + '/nltk_data/')


global t
global next_input
input = ' '.join(sys.argv[1:])
output = ''
tag = "SBG"

wnl = nltk.stem.WordNetLemmatizer()


#Private definitions begin

def apply_grammar(text):
  tokens = nltk.word_tokenize("%s" % text)
  tokens = filter(lambda word: word not in ',-!@#$%^&*()_+={}[]:;"\'<>.?/~`|\\', tokens)
  tagged = nltk.pos_tag(tokens)
  chunk_rule = ChunkRule("(<[A-M O-Z].*>+)?<N.*>?", "Chunk every noun")
  chink_rule = ChinkRule("<CC>", "Nothing")
  split_rule = SplitRule("<CD>", "<[A-Z].*>", "Split IN and CD")
  merge_rule = MergeRule("<NN.*>", "<CD>", "Merge CD into previous proper noun")
  chunk_parser = RegexpChunkParser([chunk_rule, chink_rule, split_rule, merge_rule], chunk_label=tag)
  chunked_text = chunk_parser.parse(tagged)
  return plant_a_tree(chunked_text)

def extract_tag(psent):
  for subtree in psent.subtrees():
    if subtree.label() == tag:
      yield ' '.join(word for word,tag in subtree.leaves())

def plant_a_tree(text):
   return Tree.fromstring(str(text), read_leaf=lambda x: x.split("/"))

def run(next_input):
   if len(next_input) > 0:
      tree = apply_grammar(next_input)
   else:
      tree = Tree.fromstring(str("(S )"))
   return tree   

def replace_word(text, next_value):
   next_value = next_value.replace(text, "", 1)
   next_value = next_value.strip()
   return next_value

#private definitions end


#chunk_rule = ChunkRule("(<[A-M O-Z].*>+)?<N.*>?", "Chunk every noun")
#chink_rule = ChinkRule("<IN|CD>+", "Chink every thing")
#merge_rule = MergeRule("<N.*>", "<CD>", "Merge CD")
#chunk_parser = RegexpChunkParser([chunk_rule, chink_rule, merge_rule], chunk_label=tag)
#chunked_text = chunk_parser.parse(tagged)



t = apply_grammar(input)
print t
next_input = input

while len(t) > 0:
   op_tree = t[0] 
   print op_tree
   try:
      for word in extract_tag(op_tree):
         print "----O" + word
         output += word +  ","
         next_input = replace_word(word, next_input)
         print "----O" + next_input
         t = run(next_input)
         print "++++"
         print t
         print "==================================================="
   except AttributeError:
      print t[0][0]
      next_input = replace_word(t[0][0], next_input)
      t = run(next_input)
#chunks = extract_tag(chunked_text)
#for word in extract_tag(chunked_text):
#  chunked_text = apply_grammar(input)
#   print word
#  word = wnl.lemmatize(word)
#  if pos.startswith('N'):
#    output += word + ','
#  else:
#    output += word + ' '
print output[:-1]

